grid.points(x=Investment[,dataset_cols[row]], y=Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row], y=unit(-3, "line"))
grid.text("Investments", x=unit(-3, "line"), rot=90)
popViewport(3)
}
else{
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(Investment[,dataset_cols[row+col+1]], Investment$Investment))
grid.rect()
grid.points(x=Investment[,dataset_cols[row+col+1]], y=Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "line"))
grid.text("Investment", x=unit(-3, "line"), rot=90)
popViewport(3)
}
}
}
grid.newpage()
pushViewport(viewport(layout = grid.layout(3,2)))
dataset_cols <- colnames(Investment)
dataset_cols <- drop(dataset_cols[c(1, 3:7)])
for(col in 1:2){
for(row in 1:3){
if(col==1){
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(Investment[,dataset_cols[row]], Investment$Investment,
xscale = c(min(Investment[,dataset_cols[row]])*0.9, max(Investment$Investment)*1.1)))
grid.rect()
grid.points(x=Investment[,dataset_cols[row]], y=Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row], y=unit(-3, "line"))
grid.text("Investments", x=unit(-3, "line"), rot=90)
popViewport(3)
}
else{
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(Investment[,dataset_cols[row+col+1]], Investment$Investment))
grid.rect()
grid.points(x=Investment[,dataset_cols[row+col+1]], y=Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "line"))
grid.text("Investment", x=unit(-3, "line"), rot=90)
popViewport(3)
}
}
}
9 * 1.1
grid.newpage()
pushViewport(viewport(layout = grid.layout(3,2)))
dataset_cols <- colnames(Investment)
dataset_cols <- drop(dataset_cols[c(1, 3:7)])
for(col in 1:2){
for(row in 1:3){
if(col==1){
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(Investment[,dataset_cols[row]], Investment$Investment,
yscale = c(min(Investment[,dataset_cols[row]])*0.9, max(Investment$Investment)*1.1)))
grid.rect()
grid.points(x=Investment[,dataset_cols[row]], y=Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row], y=unit(-3, "line"))
grid.text("Investments", x=unit(-3, "line"), rot=90)
popViewport(3)
}
else{
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(Investment[,dataset_cols[row+col+1]], Investment$Investment))
grid.rect()
grid.points(x=Investment[,dataset_cols[row+col+1]], y=Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "line"))
grid.text("Investment", x=unit(-3, "line"), rot=90)
popViewport(3)
}
}
}
f <- factor(seq(3,13,1), levels=seq(3,13,1))
Investment$ir_group <- as.integer(Investment$Interest)
Investment$ir_group <- factor(Investment$ir_group, levels=seq(min(Investment$ir_group), max(Investment$ir_group),1))
# Wykres z podziałem na grupy, zachowanie zależnie od poziomu stopy procentowej
xyplot(Investment~GNP|ir_group, data = Investment,
panel = function(x,y){
panel.lmline(x,y)
panel.xyplot(x,y)
})
dataset_1p <- Investment[1:10,colnames(Investment)]
dataset_2p <- Investment[11:20,colnames(Investment)]
dataset_1p$RealInvChp <- c(NA,diff(dataset_1p$RealInv)/dataset_1p$RealInv[1:9] * 100)
dataset_2p$RealInvChp <- c(NA,diff(dataset_2p$RealInv)/dataset_2p$RealInv[1:9] * 100)
row.names(dataset_2p) <- seq(1,10,1)
xyplot(dataset_1p$RealInvChp + dataset_2p$RealInvChp~seq(1,10,1), ylab="Real Investment % change",
xlab="Years to/from year 10", pch=16,
key = list(text=list(c("1 Period (Years 1-10)", "2 Period (Years 10-20)")),
points=list(pch=c(16), col=super.sym$col[1:2])))
dataset_1p
rownames(dataset_1p)
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(rownames(dataset_1p), dataset_1p$RealInvChp))
grid.rect()
grid.points(rownames(dataset_1p), dataset_1p$RealInvChp)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "line"))
grid.text("Investment", x=unit(-3, "line"), rot=90)
integer(rownames(dataset_1p))
?integer
integer
rownames(dataset_1p)
integer(length = 10, x = rownames(dataset_1p))
as.integer(rownames(dataset_1p))
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(as.integer(rownames(dataset_1p)), dataset_1p$RealInvChp))
grid.rect()
grid.points(rownames(dataset_1p), dataset_1p$RealInvChp)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "line"))
grid.text("Investment", x=unit(-3, "line"), rot=90)
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(as.integer(rownames(dataset_1p)), dataset_1p$RealInvChp))
grid.rect()
grid.points(rownames(dataset_1p), dataset_1p$RealInvChp)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "Real Investment % change"))
grid.text("Years from period 0", x=unit(-3, "line"), rot=90)
pushViewport(dataViewport(as.integer(rownames(dataset_2p)), dataset_2p$RealInvChp))
grid.points(rownames(dataset_2p), dataset_2p$RealInvChp)
grid.points(rownames(dataset_2p), dataset_2p$RealInvChp, fill="black")
grid.points(rownames(dataset_2p), dataset_2p$RealInvChp, pch=21, gp=gpar(fill="black"))
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(as.integer(rownames(dataset_1p)), dataset_1p$RealInvChp))
pushViewport(dataViewport(as.integer(rownames(dataset_2p)), dataset_2p$RealInvChp))
grid.points(rownames(dataset_2p), dataset_2p$RealInvChp, pch=21, gp=gpar(fill="black"))
grid.rect()
grid.points(rownames(dataset_1p), dataset_1p$RealInvChp)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "Real Investment % change"))
grid.text("Years from period 0", x=unit(-3, "line"), rot=90)
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(as.integer(rownames(dataset_1p)), dataset_1p$RealInvChp))
grid.rect()
grid.points(rownames(dataset_1p), dataset_1p$RealInvChp)
grid.xaxis()
grid.yaxis()
pushViewport(dataViewport(as.integer(rownames(dataset_2p)), dataset_2p$RealInvChp))
grid.points(rownames(dataset_2p), dataset_2p$RealInvChp, pch=21, gp=gpar(fill="black"))
grid.text(dataset_cols[row+col+1], y=unit(-3, "Real Investment % change"))
grid.text("Years from period 0", x=unit(-3, "line"), rot=90)
row_names <- as.numeric(row.names(Investment))
barchart(row_names~Investment, data=Investment, xlab="Investment level", ylab="Year")
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(row_names, Investment$Investment))
grid.rect()
grid.points(row_names, Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "Year"))
grid.text("investment level", x=unit(-3, "line"), rot=90)
grid.multipanel(row_names, Investment$Investment)
grid.segments(row_names, Investment$Investment)
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(row_names, Investment$Investment))
grid.rect()
grid.segments(row_names, Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "Year"))
grid.text("investment level", x=unit(-3, "line"), rot=90)
grid.lines(row_names, Investment$Investment)
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(row_names, Investment$Investment))
grid.rect()
grid.lines(row_names, Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text(dataset_cols[row+col+1], y=unit(-3, "Year"))
grid.text("investment level", x=unit(-3, "line"), rot=90)
grid.newpage()
pushViewport(viewport(layout.pos.row = row, layout.pos.col = col))
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
pushViewport(dataViewport(row_names, Investment$Investment))
grid.rect()
grid.lines(row_names, Investment$Investment)
grid.xaxis()
grid.yaxis()
grid.text("Years to/from year 0", y=unit(-3, "line"))
grid.text("investment level", x=unit(-3, "line"), rot=90)
grid.points(row_names, Investment$Investment)
# Wykres dla "grup" stóp procentowych
stripplot(Investment~ir_group, data=Investment)
grid.newpage()
pushViewport(viewport())
pushViewport(plotViewport(margins = c(4, 4, 4, 4)))
print(stripplot(Investment~ir_group, data=Investment), newpage=FALSE)
?unit
grid.newpage()
pushViewport(viewport(x=unit(0, "npc"), width = 0.5))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=unit(0.5, "npc"), width = 0.5))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
library(lattice)
library(latticeExtra)
library("lattice", lib.loc="~/R/R-3.5.1/library")
grid.newpage()
pushViewport(viewport(x=unit(0, "npc"), width = 0.5), just = "left")
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=unit(0.5, "npc"), width = 0.5), just = "left")
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
grid.newpage()
pushViewport(viewport(x=unit(0, "npc"), width = 0.5, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=unit(0.5, "npc"), width = 0.5, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
bwplot(Investment~ir_group, data=Investment)
ecdfplot(Investment~GNP, data=Investment)
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
# Powyższe dwa wykresy obok siebie
grid.newpage()
pushViewport(viewport(x=unit(0, "npc"), width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=unit(0.5, "npc"), width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
# Powyższe dwa wykresy obok siebie
grid.newpage()
pushViewport(viewport(x=unit(0, "npc"), width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=unit(0.5, "npc"), width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport()
grid.newpage()
pushViewport(viewport(x=0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport()
grid.newpage()
pushViewport(viewport(x=0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport()
# Powyższe dwa wykresy obok siebie
grid.newpage()
pushViewport(viewport(x=0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
grid.newpage()
pushViewport(viewport(x=0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport(3)
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport()
grid.newpage()
pushViewport(viewport(x=0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
grid.newpage()
pushViewport(viewport(x=0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
current.vpTree()
grid.newpage()
pushViewport(viewport(x=0, width=.4, just="left"))
print(barchart(table(mtcars$gear)),
newpage=FALSE)
popViewport()
pushViewport(viewport(x=.4, width=.6, just="left"))
print(xyplot(mpg ~ disp, data=mtcars,
group=gear,
auto.key=list(space="right"),
par.settings=list(superpose.symbol=list(pch=c(1, 3, 16),
fill="white"))),
newpage=FALSE)
popViewport()
grid.newpage()
pushViewport(viewport(x=0.0, width = 0.48, just = "left"))
# pushViewport(plotViewport(margins = seq(2,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport()
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
# pushViewport(plotViewport(margins = seq(2,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport()
grid.newpage()
pushViewport(viewport(x=0.0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(1,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport(2)
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(1,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport(2)
# Powyższe dwa wykresy obok siebie
grid.newpage()
pushViewport(viewport(x=0.0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(0.5,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport(2)
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(0.5,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport(2)
# Utworzenie podziałów dla Realnego PNB
create_groups <- function(x) if(x<=1000){
return ("<1000")
} else if(x<=1200 & x>1000 ){
return ("1000-1200")
} else{
return (">1200")
}
GNP_groups <- Investment
GNP_groups$RealGNP <- apply(GNP_groups["RealGNP"], MARGIN = 1, FUN = create_groups)
# Wykres macierzowy obrazujący zależności między czynnikami nominalnymi zalezności od poziomu PKB
super.sym <- trellis.par.get("superpose.symbol")
splom(~GNP_groups[2:4]|RealGNP, data=GNP_groups)
splom(~GNP_groups[2:4], groups=RealGNP, data=GNP_groups,
key = list(points=list(pch=super.sym$pch[1], col=super.sym$col[1:3]),
text = list(unique(GNP_groups$RealGNP)),
columns = 3))
# Wykres macierzowy obrazujący zależności między czynnikami nominalnymi zalezności od poziomu PKB
super.sym <- trellis.par.get("superpose.symbol")
splom(~GNP_groups[2:4]|RealGNP, data=GNP_groups)
grid.newpage()
pushViewport(viewport())
pushViewport(plotViewport(seq(0.5,4)))
super.sym <- trellis.par.get("superpose.symbol")
print(splom(~GNP_groups[2:4]|RealGNP, data=GNP_groups), newpage=FALSE)
grid.newpage()
pushViewport(viewport(x=0.0, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(0.5,4)))
print(bwplot(Investment~ir_group, data=Investment), newpage=FALSE)
popViewport(2)
pushViewport(viewport(x=0.5, width = 0.48, just = "left"))
pushViewport(plotViewport(margins = seq(0.5,4)))
print(ecdfplot(Investment~GNP, data=Investment), newpage=FALSE)
popViewport(2)
splom(~GNP_groups[2:4]|RealGNP, data=GNP_groups)
library(grid)
library(lattice)
library(latticeExtra)
library(ggplot2)
library(ggplot2movies)
data(Investment, package="sandwich")
Investment <- as.data.frame(Investment)
??Investment
head(Investment, 5)
# Podstawowa relacja PNB / Inwestycje
xyplot(Investment~GNP, data=Investment, panel=function(x,y){
panel.lmline(x,y)
panel.xyplot(x,y)
xyplot(Investment~GNP, data=Investment, panel=function(x,y){
panel.lmline(x,y)
panel.xyplot(x,y)
})
# Pow. wykres zmieniony:
grid.newpage()
s
sa
a
setwd("C:/Users/ireneusz.larysz/PycharmProjects/Machine_Learning/Part 4 - Clustering/Section 24 - K-Means Clustering")
dataset <- read.csv("Mall_Customers.csv")
X <- dataset[5,6]
X <- dataset[4:5]
i = 1
i = 5
kmeans(dataset, i)
sum(kmeans(dataset, i)$withinss)
kmeans(X, i)
kmeans(X, i)$withinss
1:10
# Choose the amount of clusters
wcss <- vector()
for(i in 1:10){
wcss[i] <- kmeans(X, i, iter.max = 400, nstart = 20)$withinss
}
for(i in 1:10){
wcss[i] <- sum(kmeans(X, i, iter.max = 400, nstart = 20)$withinss)
}
wcss
plot.default(1:10, wcss)
plot(1:10, wcss)
plot(1:10, wcss, type = "b")
# Elbow is at 5 clusters
clustered <- kmeans(X, 5, iter.max = 400, nstart = 20)
View(clustered)
View(clustered)
library(cluster)
clusplot(X,
clustered$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 2,
plotchar = FALSE,
span = TRUE,
main = "Cluser plot",
xlab = 'Income',
ylab = 'Spending')
clusplot(X,
clustered$cluster,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "Cluser plot",
xlab = 'Income',
ylab = 'Spending')
dataset <- read.csv("Mall_Customers.csv")
X <- dataset[4:5]
dist_matrix = dist(X, method = "euclidean")
# Using dendrogram to choose amount of clusters
dendrogram = hclust(dist(X, method = "euclidean"))
# Using dendrogram to choose amount of clusters
dendrogram = hclust(dist(X, method = "euclidean"), method = "ward.D")
View(dendrogram)
View(dendrogram)
dendrogram[["height"]]
dendrogram[["merge"]]
plot(dendrogram)
dendrogram[["height"]]
h100 = dendrogram[["order"]] > 100
h100
h100_vals = dendrogram[["order"]][h100]
h100_vals
h100 = dendrogram[["order"]] > 100.0
h100
h100 = dendrogram[["height"]] > 100.0
h100
h100_vals = dendrogram[["height"]][h100]
h100_vals
diff(h100_vals)
matrix(h100_vals, 13, 13, byrow=TRUE) - matrix(h100_vals, 13, 13, byrow=FALSE)
max(matrix(h100_vals, 13, 13, byrow=TRUE) - matrix(h100_vals, 13, 13, byrow=FALSE))
clustered <- hclust(dist(X, method = "euclidean"), method = "ward.D")
clusters <- cutree(clustered, k = 5)
View(dendrogram)
View(dendrogram)
clusplot(X,
clusters,
lines = 0,
shade = TRUE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "Cluster plot",
xlab = 'Income',
ylab = 'Spending')
